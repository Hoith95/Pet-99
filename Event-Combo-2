if _G.COMBO_EVENT then
    warn("‚õî Script ƒë√£ ƒë∆∞·ª£c ch·∫°y tr∆∞·ªõc ƒë√≥!")
    return
end

_G.COMBO_EVENT = true

-- Services & data
local Players = game:GetService("Players")
local TeleportService = game:GetService("TeleportService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local HttpService = game:GetService("HttpService")
local player = Players.LocalPlayer
local PlayerGui = player:WaitForChild("PlayerGui")

-- Config place IDs & remote
local FARM_PLACEID = 119454325063278
local FISH_PLACEID = 95635359880599
local WORLD4_PLACEID = 140403681187145 -- c·∫≠p nh·∫≠t n·∫øu c·∫ßn
local WORLD4_REMOTE_NAME = "World4Teleport"
local REQUIRED_SECONDS = 10 * 60 -- 10 minutes

-- Runtime persisted
local runtime = {
    farm = { total = 0, last = os.time(), done = false },
    fish = { total = 0, last = os.time(), done = false },
    lastDay = os.date("%d/%m/%Y"),
    reset23Date = nil
}

-- File helpers
local function getFileName() return "comboEventLog.json" end

local function loadData()
    if isfile(getFileName()) then
        local ok, data = pcall(function() return HttpService:JSONDecode(readfile(getFileName())) end)
        if ok and type(data) == "table" then
            runtime = data
            runtime.farm = runtime.farm or { total = 0, last = os.time(), done = false }
            runtime.fish = runtime.fish or { total = 0, last = os.time(), done = false }
            runtime.lastDay = runtime.lastDay or os.date("%d/%m/%Y")
        end
    end
end

local function saveData()
    runtime.lastDay = os.date("%d/%m/%Y")
    pcall(function() writefile(getFileName(), HttpService:JSONEncode(runtime)) end)
end

local function resetIfNewDay()
    local today = os.date("%d/%m/%Y")
    if runtime.lastDay ~= today then
        runtime = {
            farm = { total = 0, last = os.time(), done = false },
            fish = { total = 0, last = os.time(), done = false },
            lastDay = today,
            reset23Date = nil
        }
        -- also clear the global done flag just in case (defensive)
        pcall(function() _G.COMBO_EVENT_DONE = false end)
        saveData()
    end
end

-- VN time helper (UTC+7)
local function getVNNow()
    local now = os.date("!*t", os.time(os.date("!*t")) + 7 * 3600)
    return now
end

-- Reset at 23:00 VN once per VN-day
local function checkResetAt23()
    local vn = getVNNow()
    if not vn then return end
    local vnDateStr = string.format("%02d/%02d/%04d", vn.day, vn.month, vn.year)
    if vn.hour == 23 then
        if runtime.reset23Date ~= vnDateStr then
            runtime.farm.total = 0
            runtime.farm.last = os.time()
            runtime.farm.done = false
            runtime.fish.total = 0
            runtime.fish.last = os.time()
            runtime.fish.done = false
            runtime.reset23Date = vnDateStr
            runtime.lastDay = vnDateStr
            -- reset the global flag as requested
            pcall(function() _G.COMBO_EVENT_DONE = false end)
            saveData()
            warn(("üîÅ Reset progress at 23:00 VN (%s)"):format(vnDateStr))
        end
    end
end

-- If global done flag is observed, mark both tasks as done immediately
local function applyGlobalDone()
    if _G.COMBO_EVENT_DONE == true then
        -- mark both as done and ensure totals reach required seconds
        runtime.farm.done = true
        runtime.fish.done = true
        runtime.farm.total = math.max(runtime.farm.total or 0, REQUIRED_SECONDS)
        runtime.fish.total = math.max(runtime.fish.total or 0, REQUIRED_SECONDS)
        runtime.farm.last = runtime.farm.last or os.time()
        runtime.fish.last = runtime.fish.last or os.time()
        saveData()
        warn("‚úÖ _G.COMBO_EVENT_DONE detected ‚Äî Farm & Fishing marked as DONE.")
        -- if both done, attempt to teleport to World4
        pcall(function()
            if runtime.farm.done and runtime.fish.done then
                pcall(safeInvokeWorld4)
            end
        end)
    end
end

-- Progress update
local function updateProgress(which)
    local now = os.time()
    local data = runtime[which]
    if not data then return end
    if type(data.last) ~= "number" then data.last = now end
    local delta = math.max(0, now - data.last)
    data.total = (data.total or 0) + delta
    data.last = now
    if data.total >= REQUIRED_SECONDS then data.done = true end
    saveData()
end

-- GUI creation (right-bottom small progress)
local function createGUI()
    if PlayerGui:FindFirstChild("EventProgressUI") then PlayerGui.EventProgressUI:Destroy() end

    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "EventProgressUI"
    screenGui.Parent = PlayerGui

    local frame = Instance.new("Frame")
    frame.Size = UDim2.new(0, 250, 0, 68)
    frame.Position = UDim2.new(1, -260, 1, -100)
    frame.BackgroundColor3 = Color3.fromRGB(25,25,25)
    frame.BackgroundTransparency = 0.25
    frame.BorderSizePixel = 0
    frame.Parent = screenGui
    Instance.new("UICorner", frame).CornerRadius = UDim.new(0,12)

    local function createRow(parent, text, y, color)
        local lbl = Instance.new("TextLabel")
        lbl.Size = UDim2.new(1, -10, 0, 20)
        lbl.Position = UDim2.new(0,5,0,y)
        lbl.BackgroundTransparency = 1
        lbl.TextColor3 = Color3.fromRGB(230,230,230)
        lbl.TextXAlignment = Enum.TextXAlignment.Left
        lbl.Font = Enum.Font.SourceSansBold
        lbl.TextSize = 26
        lbl.Text = text .. ": 0%"
        lbl.Parent = parent

        local bg = Instance.new("Frame")
        bg.Size = UDim2.new(1, -10, 0, 12)
        bg.Position = UDim2.new(0,5,0,y + 22)
        bg.BackgroundColor3 = Color3.fromRGB(60,60,60)
        bg.BorderSizePixel = 0
        bg.Parent = parent
        Instance.new("UICorner", bg).CornerRadius = UDim.new(0,6)

        local bar = Instance.new("Frame")
        bar.Size = UDim2.new(0,0,1,0)
        bar.BackgroundColor3 = color
        bar.BorderSizePixel = 0
        bar.Parent = bg
        Instance.new("UICorner", bar).CornerRadius = UDim.new(0,6)

        return lbl, bar
    end

    local farmLbl, farmBar = createRow(frame, "Farm", 5, Color3.fromRGB(100,255,100))
    local fishLbl, fishBar = createRow(frame, "Fishing", 36, Color3.fromRGB(100,150,255))

    task.spawn(function()
        while screenGui.Parent do
            local farmPct = math.min(100, math.floor((runtime.farm.total or 0) / REQUIRED_SECONDS * 100))
            local fishPct = math.min(100, math.floor((runtime.fish.total or 0) / REQUIRED_SECONDS * 100))

            farmLbl.Text = string.format("Farm: %d%%", farmPct)
            farmBar.Size = UDim2.new(farmPct/100, 0, 1, 0)

            fishLbl.Text = string.format("Fishing: %d%%", fishPct)
            fishBar.Size = UDim2.new(fishPct/100, 0, 1, 0)

            task.wait(1)
        end
    end)
end

-- World4 invoke helper (safe + retry + check)
local function safeInvokeWorld4()
    local attempts = 3
    for i = 1, attempts do
        local ok, err = pcall(function()
            game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("World4Teleport"):InvokeServer()
        end)

        if ok then
            warn(("‚úÖ G·ª≠i l·ªánh Tele World4 (attempt %d)"):format(i))
        else
            warn(("‚ö†Ô∏è L·ªói khi g·ª≠i l·ªánh Tele World4 (attempt %d): %s"):format(i, tostring(err)))
        end

        task.wait(60)
        if game.PlaceId == WORLD4_PLACEID then
            warn(("üöÄ ƒê√£ v√†o World4 (PlaceId=%s)"):format(tostring(WORLD4_PLACEID)))
            return true
        else
            warn(("‚è±Ô∏è Sau attempt %d: ch∆∞a v√†o World4, PlaceId hi·ªán t·∫°i = %s"):format(i, tostring(game.PlaceId)))
        end
    end

    -- N·∫øu sau 3 l·∫ßn v·∫´n ch∆∞a v√†o World4 -> kick v·ªõi th√¥ng b√°o
    pcall(function()
        local pl = Players.LocalPlayer
        if pl and pl.Parent then
            pl:Kick("Heo Tele World 4 Th·∫•t B·∫°i")
        end
    end)
    return false
end

-- Serverhop links (as requested)
local function serverhopToFishing()
    local ok = false
    pcall(function()
        ok = loadstring(game:HttpGet("https://raw.githubusercontent.com/Hoith95/Pet-99/main/ServerHop-Event-Fish-2"))() or true
    end)
    return ok
end
local function serverhopToFarm()
    local ok = false
    pcall(function()
        ok = loadstring(game:HttpGet("https://raw.githubusercontent.com/Hoith95/Pet-99/main/ServerHop-Event-World-2"))() or true
    end)
    return ok
end

-- In-server teleport fallback (also reset last and save)
local function teleportToFarmInServer()
    local ok, children = pcall(function() return workspace.__THINGS.Instances.FarmingWorld.Teleports:GetChildren() end)
    if not ok or type(children) ~= "table" then return false end
    local enter = children[5]
    if not enter then return false end
    local hrp = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
    if hrp and enter:IsA("BasePart") then
        hrp.CFrame = enter.CFrame + Vector3.new(0,3,0)
        runtime.farm.last = os.time()
        saveData()
        return true
    end
    return false
end
local function teleportToFishingInServer()
    local ok, enter = pcall(function() return workspace.__THINGS.Instances.FishingEvent.Teleports.Enter end)
    if not ok or not enter then return false end
    local hrp = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
    if hrp and enter:IsA("BasePart") then
        hrp.CFrame = enter.CFrame + Vector3.new(0,3,0)
        runtime.fish.last = os.time()
        saveData()
        return true
    end
    return false
end

-- Trackers
local function trackFarm()
    task.spawn(function()
        while not runtime.farm.done do
            updateProgress("farm")
            task.wait(10)
        end
        -- Khi farm xong
        if runtime.fish.done then
            -- n·∫øu fishing c≈©ng xong th√¨ tele World4
            pcall(safeInvokeWorld4)
        else
            -- n·∫øu fishing ch∆∞a xong th√¨ chuy·ªÉn sang fishing
            pcall(serverhopToFishing)
        end
    end)
end

local function trackFishing()
    task.spawn(function()
        while not runtime.fish.done do
            updateProgress("fish")
            task.wait(10)
        end
        -- Khi fishing xong
        if runtime.farm.done then
            -- n·∫øu farm c≈©ng xong th√¨ tele World4
            pcall(safeInvokeWorld4)
        else
            -- n·∫øu farm ch∆∞a xong th√¨ chuy·ªÉn sang farm
            pcall(serverhopToFarm)
        end
    end)
end

-- Wait for new day helper (used if needed)
local function waitForNewDay()
    local initial = os.date("%d/%m/%Y")
    while true do
        task.wait(60)
        if os.date("%d/%m/%Y") ~= initial then
            resetIfNewDay()
            break
        end
    end
end

-- Periodic reset checker for VN 23:00
task.spawn(function()
    while true do
        pcall(checkResetAt23)
        task.wait(60)
    end
end)

-- === NEW: Wait for _G.Time_Trial_End helper ===
local function waitForTimeTrialEnd(timeoutSeconds)
    local startTime = os.time()
    while os.time() - startTime < (timeoutSeconds or 3600) do
        if _G.Time_Trial_End == true then
            warn("‚úÖ _G.Time_Trial_End ƒë√£ ƒë∆∞·ª£c b·∫≠t, ti·∫øp t·ª•c logic ch√≠nh.")
            return true
        end

        -- n·∫øu kh√¥ng ·ªü World4 th√¨ c·ªë g·∫Øng v√†o World4
        if game.PlaceId ~= WORLD4_PLACEID then
            local ok = pcall(safeInvokeWorld4)
            if not ok and game.PlaceId ~= WORLD4_PLACEID then
                -- n·∫øu fail ti·∫øp th√¨ return false ƒë·ªÉ x·ª≠ l√Ω (safeInvokeWorld4 s·∫Ω kick n·∫øu failed)
                return false
            end
        end

        -- n·∫øu v·∫´n ·ªü World4 nh∆∞ng ch∆∞a true -> ƒë·ª£i 1s tr∆∞·ªõc khi check l·∫°i
        task.wait(1)
    end

    -- timeout
    warn(("‚õî ƒê·ª£i _G.Time_Trial_End qu√° %d gi√¢y, s·∫Ω kick ng∆∞·ªùi ch∆°i."):format(timeoutSeconds or 3600))
    pcall(function()
        local pl = Players.LocalPlayer
        if pl and pl.Parent then
            pl:Kick("Timeout waiting for Time Trial to start (60 minutes).")
        end
    end)
    return false
end

-- Main flow (prioritize FARM world) with Time Trial gating
local function main()
    loadData()
    resetIfNewDay()

    -- If a global done flag is present at startup, apply it immediately
    pcall(applyGlobalDone)

    -- Delay GUI 90s (tracking unaffected)
    task.spawn(function()
        task.wait(90)
        pcall(createGUI)
    end)

    -- === NEW: Check _G.Time_Trial_End first ===
    if _G.Time_Trial_End ~= true then
        warn("‚ÑπÔ∏è _G.Time_Trial_End hi·ªán ƒëang false. Chuy·ªÉn h∆∞·ªõng sang World4 v√† ch·ªù t·ªëi ƒëa 60 ph√∫t.")
        -- n·∫øu ch∆∞a ·ªü World4, c·ªë g·∫Øng v√†o World4
        if game.PlaceId ~= WORLD4_PLACEID then
            local ok = pcall(safeInvokeWorld4)
            if not ok and game.PlaceId ~= WORLD4_PLACEID then
                -- safeInvokeWorld4 ƒë√£ kick ho·∫∑c th·∫•t b·∫°i -> k·∫øt th√∫c
                return
            end
        end

        -- b√¢y gi·ªù ·ªü world4 (ho·∫∑c ƒë√£ c·ªë g·∫Øng v√†o). Ch·ªù Time_Trial_End
        local resumed = waitForTimeTrialEnd(60 * 60) -- 60 ph√∫t
        if not resumed then
            return
        end
    end

    if runtime.farm.done and runtime.fish.done then
        safeInvokeWorld4()
        return
    end

    local placeId = game.PlaceId

    -- If player is in FARM place: stay and track farm (priority)
    if placeId == FARM_PLACEID then
        runtime.farm.last = os.time()
        saveData()

        -- N·∫øu farm ch∆∞a xong -> track farm lu√¥n
        if not runtime.farm.done then
            trackFarm()
            return
        end

        -- N·∫øu farm ƒë√£ xong nh∆∞ng fishing ch∆∞a -> serverhop sang fishing
        if runtime.farm.done and (not runtime.fish.done) then
            local okHop = pcall(serverhopToFishing)
            if not okHop then teleportToFishingInServer() end
            return
        end
    end

    -- If player is in FISHING place
    if placeId == FISH_PLACEID then
        runtime.fish.last = os.time()
        saveData()

        -- N·∫øu fishing ch∆∞a xong
        if not runtime.fish.done then
            -- Nh∆∞ng n·∫øu farm v·∫´n ch∆∞a xong -> ∆∞u ti√™n farm: chuy·ªÉn serverhop v·ªÅ farm
            if not runtime.farm.done then
                local okHop = pcall(serverhopToFarm)
                if not okHop then teleportToFarmInServer() end
                return
            else
                -- Farm ƒë√£ xong, ti·∫øp t·ª•c track fishing
                trackFishing()
                return
            end
        end

        -- N·∫øu fishing ƒë√£ xong nh∆∞ng farm ch∆∞a -> chuy·ªÉn sang farm
        if not runtime.farm.done then
            local okHop = pcall(serverhopToFarm)
            if not okHop then teleportToFarmInServer() end
            return
        end
    end

    -- N·∫øu ·ªü map kh√°c
    if (not runtime.fish.done) and (not runtime.farm.done) then
        -- ∆∞u ti√™n ƒëi serverhop t·ªõi FARM tr∆∞·ªõc
        local okHop = pcall(serverhopToFarm)
        if not okHop then teleportToFarmInServer() end
        return
    end

    if runtime.fish.done and (not runtime.farm.done) then
        local okHop = pcall(serverhopToFarm)
        if not okHop then teleportToFarmInServer() end
        return
    end

    if runtime.farm.done and (not runtime.fish.done) then
        local okHop = pcall(serverhopToFishing)
        if not okHop then teleportToFishingInServer() end
        return
    end
end

-- Watcher: if _G.COMBO_EVENT_DONE becomes true at any time, apply immediately
task.spawn(function()
    while true do
        pcall(function()
            if _G.COMBO_EVENT_DONE == true then
                applyGlobalDone()
            end
        end)
        task.wait(2)
    end
end)

pcall(main)
