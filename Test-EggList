local Workspace = game:GetService("Workspace")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local TilesFolder = Workspace:WaitForChild("__TILE"):WaitForChild("Tiles")
local CustomEggsFolder = Workspace:WaitForChild("__EGG"):WaitForChild("Custom")

-- üß† H√†m ki·ªÉm tra egg c√≥ slashes kh√¥ng
local function hasSlashes(egg)
	local ok, result = pcall(function()
		return egg:FindFirstChild("Egg") and egg.Egg:FindFirstChild("slashes")
	end)
	return ok and result ~= nil
end

-- üéØ T√¨m tile c√≥ Huge Chance cao nh·∫•t
local function findBestHugeTile()
	local bestTile = nil
	local maxChance = 0
	for _, tile in pairs(TilesFolder:GetChildren()) do
		if tile:FindFirstChild("HugeChance") then
			local value = tonumber(tile.HugeChance.Value)
			if value and value > maxChance then
				bestTile = tile
				maxChance = value
			end
		end
	end
	return bestTile, maxChance
end

-- ü•ö T√¨m egg g·∫ßn tile v√† c√≥ slashes
local function findEggNearTile(tile)
	local closestEgg, minDistance = nil, math.huge
	for _, egg in pairs(CustomEggsFolder:GetChildren()) do
		if #egg.Name == 32 and egg:IsA("Model") and egg:FindFirstChild("Part") and hasSlashes(egg) then
			local dist = (egg.Part.Position - tile.PrimaryPart.Position).Magnitude
			if dist < minDistance then
				closestEgg, minDistance = egg, dist
			end
		end
	end
	return closestEgg
end

-- ‚ñ∂Ô∏è B·∫Øt ƒë·∫ßu test
local tile, chance = findBestHugeTile()
if tile and chance > 0 then
	print("üß± Tile Huge cao nh·∫•t:", tile.Name, "| Chance:", chance .. "x")

	local egg = findEggNearTile(tile)
	if egg then
		print("ü•ö Egg h·ª£p l·ªá g·∫ßn tile:", egg.Name)
	else
		print("‚ùå Kh√¥ng t√¨m th·∫•y egg h·ª£p l·ªá g·∫ßn tile n√†y.")
	end
else
	print("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y tile n√†o c√≥ Huge Chance.")
end
