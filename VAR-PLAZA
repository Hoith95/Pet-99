-- ===== CONFIG =====
local PRIORITIZE_EXCLUDE = true        -- true = hop ngay khi thấy excluded (bất kể số người)
local CASE_INSENSITIVE = false         -- true nếu muốn so sánh không phân biệt hoa/thường
local MAX_PLAYERS_BELOW = 10           -- nếu không có excluded, hop khi số người <= giá trị này
local SERVERHOP_COOLDOWN = 300         -- cooldown giữa 2 lần hop (giây)
local CHECK_INTERVAL = 5               -- khoảng kiểm tra vòng lặp chính (giây)
local DIAMOND_KEY = "\240\159\146\142 Diamonds" -- key leaderstats kim cương
-- Danh sách username cần tránh (mặc định case-sensitive; bật CASE_INSENSITIVE để ignore case)
local usernamesToExclude = {
    ["Zephy_Marnell604"] = true,
    ["Dravon_Liorrex220"] = true,
    ["Taryn_Xelvorn389"] = true,
    ["Valric_Solvynn026"] = true,
    ["Zarek_Maelith750"] = true,
    ["nguyenhuyengh3x"] = true,
    ["truongcuong8beu"] = true,
    ["nguyenhieu8i6w"] = true,
    ["phanquynhku1u"] = true,
    ["lehoangvw2k"] = true,
}
-- ====================

-- wait until game + leaderstats ready
repeat task.wait() until game:IsLoaded()
local Players = game:GetService("Players")
local localPlayer = Players.LocalPlayer
local leaderstats = localPlayer:WaitForChild("leaderstats")

-- normalize exclude table if needed
local excludeNormalized = {}
if CASE_INSENSITIVE then
    for k, v in pairs(usernamesToExclude) do
        excludeNormalized[string.lower(k)] = v
    end
end

local function isExcludedUsername(name)
    if CASE_INSENSITIVE then
        return excludeNormalized[string.lower(name)]
    else
        return usernamesToExclude[name]
    end
end

-- safe initial diamonds
local initialDiamonds = 0
if leaderstats:FindFirstChild(DIAMOND_KEY) then
    initialDiamonds = leaderstats[DIAMOND_KEY].Value
else
    warn("Không tìm thấy key kim cương: " .. tostring(DIAMOND_KEY) .. ". initialDiamonds = 0")
end

-- hop control
local isHopping = false
local lastHopTime = 0

local function canHop()
    if isHopping then return false end
    local now = os.time()
    if (now - lastHopTime) < SERVERHOP_COOLDOWN then
        return false
    end
    return true
end

local function serverHop()
    if not canHop() then
        print("[ServerHop] Đang trong cooldown hoặc đã hop.")
        return false
    end

    isHopping = true
    print("[ServerHop] Bắt đầu ServerHop...")

    local ok, err = pcall(function()
        -- main hop script (giữ nguyên links)
        loadstring(game:HttpGet("https://raw.githubusercontent.com/Hoith95/Pet-99/main/ServerHop-Plaza"))()
        task.wait(60)
        loadstring(game:HttpGet("https://raw.githubusercontent.com/Hoith95/Pet-99/main/JoinLow"))()
    end)

    lastHopTime = os.time()
    isHopping = false

    if not ok then
        warn("[ServerHop] Lỗi khi chạy: " .. tostring(err))
        return false
    end

    print("[ServerHop] Hoàn tất.")
    return true
end

local function hasExcludedPlayer()
    for _, p in ipairs(Players:GetPlayers()) do
        if isExcludedUsername(p.Name) then
            return true, p.Name
        end
    end
    return false, nil
end

-- Main loop: ưu tiên check excluded, nếu không có thì check số người
task.spawn(function()
    while true do
        task.wait(CHECK_INTERVAL)

        if isHopping then
            -- đang hop, skip vòng này
        else
            local excluded, who = hasExcludedPlayer()
            if excluded and PRIORITIZE_EXCLUDE then
                print("[Main] Phát hiện excluded user (" .. tostring(who) .. ") -> hop ngay.")
                serverHop()
                return -- kết thúc thread (thường bị disconnect sau hop)
            end

            -- nếu không có excluded (hoặc không ưu tiên), kiểm tra số người
            local playerCount = #Players:GetPlayers()

            -- nếu PRIORITIZE_EXCLUDE = false thì vẫn cần check excluded trước khi hop theo số người
            if not PRIORITIZE_EXCLUDE then
                if excluded then
                    print("[Main] Số người: " .. playerCount .. " và phát hiện excluded ("..tostring(who)..") -> hop.")
                    serverHop()
                    return
                end

                if playerCount <= MAX_PLAYERS_BELOW then
                    print("[Main] Số người <= " .. MAX_PLAYERS_BELOW .. " và không có excluded -> hop theo quy tắc.")
                    serverHop()
                    return
                else
                    print("[Main] Server có " .. playerCount .. " người (> " .. MAX_PLAYERS_BELOW .. "). Chờ.")
                    -- chờ thêm vòng
                end
            else
                -- PRIORITIZE_EXCLUDE = true và không có excluded
                if playerCount <= MAX_PLAYERS_BELOW then
                    print("[Main] Không có excluded và số người <= " .. MAX_PLAYERS_BELOW .. " -> hop.")
                    serverHop()
                    return
                else
                    -- server đông và không có excluded -> tiếp tục vòng lặp
                    -- (không in quá nhiều log để tránh spam)
                end
            end
        end
    end
end)

-- Lắng nghe player mới vào; nếu là excluded -> hop ngay
Players.PlayerAdded:Connect(function(p)
    task.wait(0.5) -- nhỏ delay cho chắc
    if isExcludedUsername(p.Name) then
        print("[PlayerAdded] Phát hiện excluded ("..tostring(p.Name)..") -> hop ngay.")
        serverHop()
    end
end)

-- Check diamonds sau 1 giờ (chạy 1 lần)
task.spawn(function()
    print("[Diamonds] Initial: " .. tostring(initialDiamonds))
    task.wait(3600) -- 1 giờ
    local cur = 0
    if leaderstats:FindFirstChild(DIAMOND_KEY) then
        cur = leaderstats[DIAMOND_KEY].Value
    else
        warn("[Diamonds] Không tìm thấy key khi check sau 1 giờ.")
    end

    if cur == initialDiamonds then
        print("[Diamonds] Không tăng sau 1 giờ -> thực hiện ServerHop.")
        serverHop()
    else
        print("[Diamonds] Đã thay đổi: " .. tostring(initialDiamonds) .. " -> " .. tostring(cur) .. " -> không hop.")
    end
end)

-- Claim Mailbox mỗi 3 phút
task.spawn(function()
    while true do
        task.wait(180)
        local ok, res = pcall(function()
            local net = game:GetService("ReplicatedStorage"):WaitForChild("Network")
            local mailbox = net:WaitForChild("Mailbox: Claim All")
            mailbox:InvokeServer()
        end)
        if ok then
            print("[Mailbox] Đã nhận toàn bộ thư.")
        else
            warn("[Mailbox] Lỗi khi claim: " .. tostring(res))
        end
    end
end)
