-- Ki·ªÉm tra bi·∫øn to√†n c·ª•c ƒë·ªÉ x√°c ƒë·ªãnh script ƒë√£ ch·∫°y hay ch∆∞a
if _G.DAYGIFTFREES then
    warn("‚õî Script ƒë√£ ƒë∆∞·ª£c ch·∫°y tr∆∞·ªõc ƒë√≥!")
    return
end

-- ƒê√°nh d·∫•u script ƒë√£ ƒë∆∞·ª£c ch·∫°y
_G.DAYGIFTFREES = true

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local daycareCmds = require(ReplicatedStorage.Library.Client.DaycareCmds)
local saveModule = require(ReplicatedStorage.Library.Client.Save)

-- Ki·ªÉm tra xem c√≥ th√∫ c∆∞ng n√†o ƒëang trong m√°y chƒÉm s√≥c hay kh√¥ng
local petInDaycare = function()
    local active = daycareCmds.GetActive()
    return type(active) == "table" and next(active) ~= nil
end

-- T√≠nh to√°n th·ªùi gian c√≤n l·∫°i c·ªßa th√∫ c∆∞ng trong m√°y chƒÉm s√≥c
local getRemainingTime = function()
    local remainingTime = 0
    for petId, _ in pairs(daycareCmds.GetActive()) do
        local petRemainingTime = daycareCmds.ComputeRemainingTime(petId)
        if petRemainingTime > remainingTime then
            remainingTime = petRemainingTime
        end
    end
    return remainingTime
end

-- H√†m l·∫•y pet lo·∫°i Rainbow Blooming Axolotl t·ª´ Inventory
local function getRainbowAxolotlPets()
    local inventory = saveModule.Get() and saveModule.Get().Inventory and saveModule.Get().Inventory.Pet
    if not inventory then
        return nil
    end

    local function getPetType(pt)
        if pt == 1 then return "Golden"
        elseif pt == 2 then return "Rainbow"
        else return "Normal" end
    end

    local rainbowAxolotlUIDs = {}
    for PetUID, PetData in pairs(inventory) do
        if PetData.id and string.find(PetData.id, "Blooming Axolotl") then
            local petType = getPetType(PetData.pt)
            if petType == "Rainbow" then
                table.insert(rainbowAxolotlUIDs, PetUID)
                if #rainbowAxolotlUIDs >= 30 then break end
            end
        end
    end
    return rainbowAxolotlUIDs
end

-- Ki·ªÉm tra v√† th·ª±c hi·ªán h√†nh ƒë·ªông n·∫øu th√∫ c∆∞ng ƒë√£ h·∫øt th·ªùi gian trong Daycare
local checkDaycareAndReEnroll = function()
    if petInDaycare() then
        local remainingTime = getRemainingTime()
        if remainingTime <= 0 then
            print("üéÅ Th√∫ c∆∞ng ƒë√£ ho√†n th√†nh, nh·∫≠n th∆∞·ªüng...")
            pcall(function()
                ReplicatedStorage.Network:FindFirstChild("Daycare: Claim"):InvokeServer()
            end)
        else
            print(("‚è≥ Th√∫ c∆∞ng v·∫´n ƒëang trong daycare, c√≤n %.0f gi√¢y"):format(remainingTime))
            return -- ch∆∞a xong th√¨ kh√¥ng enroll l·∫°i
        end
    end

    -- N·∫øu kh√¥ng c√≥ pet ho·∫∑c v·ª´a nh·∫≠n xong ‚Üí g·ª≠i l·∫°i 30 Rainbow Blooming Axolotl
    local rainbowAxolotlUIDs = getRainbowAxolotlPets()
    if not rainbowAxolotlUIDs or #rainbowAxolotlUIDs == 0 then
        warn("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y Rainbow Blooming Axolotl trong kho!")
        return
    end

    local enrollTable = {}
    for _, uid in ipairs(rainbowAxolotlUIDs) do
        enrollTable[uid] = 30
    end

    local success, result = pcall(function()
        return ReplicatedStorage.Network:FindFirstChild("Daycare: Enroll"):InvokeServer(enrollTable)
    end)

    if success then
        print("‚úÖ ƒê√£ g·ª≠i", #rainbowAxolotlUIDs, "Rainbow Blooming Axolotl v√†o Daycare!")
    else
        warn("‚ùå L·ªói khi g·ª≠i pet v√†o Daycare:", result)
    end
end

-- T√≠nh nƒÉng "Redeem Free Gift"
local redeemEvent = ReplicatedStorage.Network:FindFirstChild("Redeem Free Gift")
local redeemGifts = function()
    if redeemEvent then
        for i = 1, 12 do
            pcall(function()
                redeemEvent:InvokeServer(i)
            end)
            wait(1)
        end
        print("üéâ ƒê√£ nh·∫≠n to√†n b·ªô Free Gifts!")
    end
end

-- üöÄ Ki·ªÉm tra ban ƒë·∫ßu: nh·∫≠n th∆∞·ªüng ho·∫∑c enroll 30 pet tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu loop
print("üîç ƒêang ki·ªÉm tra Daycare ban ƒë·∫ßu...")
checkDaycareAndReEnroll()
wait(5)
redeemGifts()

-- üîÅ Ch·∫°y ki·ªÉm tra m·ªói 1 ph√∫t
while true do
    wait(68)
    checkDaycareAndReEnroll()
    redeemGifts()
end
