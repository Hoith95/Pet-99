-- Kiểm tra biến toàn cục để xác định script đã chạy hay chưa
if _G.DAYGIFTFREES then
    warn("Script đã được chạy trước đó!")
    return -- Dừng script nếu đã chạy
end

-- Đánh dấu script đã được chạy
_G.DAYGIFTFREES = true

-- Cải thiện các hàm để tránh gọi lại các giá trị không thay đổi
local daycareCmds = require(game.ReplicatedStorage.Library.Client.DaycareCmds)
local saveModule = require(game.ReplicatedStorage.Library.Client.Save)
local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- Kiểm tra xem có thú cưng nào đang trong máy chăm sóc hay không
local petInDaycare = function()
    return TableLength(daycareCmds.GetActive()) > 0
end

-- Tính toán thời gian còn lại của thú cưng trong máy chăm sóc
local getRemainingTime = function()
    local remainingTime = 0
    -- Tìm thời gian còn lại lớn nhất từ các thú cưng đang trong máy chăm sóc
    for petId, _ in pairs(daycareCmds.GetActive()) do
        local petRemainingTime = daycareCmds.ComputeRemainingTime(petId)
        if petRemainingTime > remainingTime then
            remainingTime = petRemainingTime
        end
    end
    return remainingTime
end

-- Hàm lấy pet loại Rainbow từ Inventory
local function getRainbowFoxPets()
    local inventory = saveModule.Get() and saveModule.Get().Inventory and saveModule.Get().Inventory.Pet
    if not inventory then
        return nil
    end

    -- Hàm xác định loại thú cưng
    local function getPetType(pt)
        if pt == 1 then return "Golden"
        elseif pt == 2 then return "Rainbow"
        else return "Normal"
        end
    end

    -- Danh sách UID pet "Player Fox" loại Rainbow
    local rainbowFoxUIDs = {}

    -- Tìm pet phù hợp
    for PetUID, PetData in pairs(inventory) do
        if PetData.id and string.find(PetData.id, "Player Fox") then
            local petType = getPetType(PetData.pt)
            if petType == "Rainbow" then
                table.insert(rainbowFoxUIDs, PetUID)
                if #rainbowFoxUIDs >= 2 then break end -- Chỉ lấy tối đa 2 UID
            end
        end
    end

    return rainbowFoxUIDs
end

-- Kiểm tra và thực hiện hành động nếu thú cưng đã hết thời gian trong Daycare
local checkDaycareAndReEnroll = function()
    -- Nếu có thú cưng trong daycare
    if petInDaycare() then
        -- Kiểm tra thời gian còn lại
        local remainingTime = getRemainingTime()
        -- Nếu thời gian hết hoặc không xác định, thu hồi thú cưng
        if remainingTime <= 0 then
            game:GetService("ReplicatedStorage").Network:FindFirstChild("Daycare: Claim"):InvokeServer()
        end
    end

    -- Lấy danh sách Rainbow Player Fox pets
    local rainbowFoxUIDs = getRainbowFoxPets()
    if not rainbowFoxUIDs then return end

    -- Thử từng UID
    for _, uid in ipairs(rainbowFoxUIDs) do
        local args = {
            [1] = {
                [uid] = 30
            }
        }

        local success, result = pcall(function()
            return game:GetService("ReplicatedStorage").Network:FindFirstChild("Daycare: Enroll"):InvokeServer(unpack(args))
        end)

        if success then
            break -- Dừng nếu thành công
        end
    end
end

-- Tính năng "Redeem Free Gift"
local redeemEvent = ReplicatedStorage.Network:FindFirstChild("Redeem Free Gift")
local redeemGifts = function()
    if redeemEvent then
        for i = 1, 12 do
            pcall(function()
                redeemEvent:InvokeServer(i)
            end)

            wait(1) -- tránh spam server quá nhanh
        end
    end
end

-- Chạy kiểm tra mỗi 1 phút
while true do
    wait(68)  -- Chờ 1 phút
    checkDaycareAndReEnroll()  -- Kiểm tra và thực hiện hành động
    redeemGifts()  -- Kiểm tra và nhận quà
end
