if _G.DAYGIFTFREES then return end
_G.DAYGIFTFREES = true

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local daycareCmds = require(ReplicatedStorage.Library.Client.DaycareCmds)
local saveModule = require(ReplicatedStorage.Library.Client.Save)

local enrollRemote = ReplicatedStorage.Network:FindFirstChild("Daycare: Enroll")
local claimRemote = ReplicatedStorage.Network:FindFirstChild("Daycare: Claim")
local redeemEvent = ReplicatedStorage.Network:FindFirstChild("Redeem Free Gift")

local function petInDaycare()
    local active = daycareCmds.GetActive()
    return type(active) == "table" and next(active) ~= nil
end

local function getRemainingTime()
    local remainingTime = 0
    for petId, _ in pairs(daycareCmds.GetActive() or {}) do
        local success, petRemaining = pcall(function() return daycareCmds.ComputeRemainingTime(petId) end)
        if success and type(petRemaining) == "number" and petRemaining > remainingTime then
            remainingTime = petRemaining
        end
    end
    return remainingTime
end

local function getRainbowBloomingUIDs(maxCount)
    maxCount = maxCount or 30
    local result = {}
    local save = saveModule.Get()
    local inventory = save and save.Inventory and save.Inventory.Pet
    if not inventory then return result end
    local function isBloomingRainbow(petData)
        if not petData or not petData.id then return false end
        if tostring(petData.id):lower():find("blooming axolotl") and petData.pt == 2 then
            return true
        end
        return false
    end
    for uid, petData in pairs(inventory) do
        if #result >= maxCount then break end
        if isBloomingRainbow(petData) then
            local amount = tonumber(petData._am) or 1
            local take = math.min(amount, maxCount - #result)
            for i = 1, take do
                table.insert(result, uid)
                if #result >= maxCount then break end
            end
        end
    end
    return result
end

local function checkDaycareAndReEnroll()
    if petInDaycare() then
        local remainingTime = getRemainingTime()
        if remainingTime <= 0 then
            if claimRemote then
                pcall(function() claimRemote:InvokeServer() end)
            end
        else
            return
        end
    end

    if not enrollRemote then return end

    local toSend = getRainbowBloomingUIDs(30)
    if not toSend or #toSend == 0 then return end

    for _, uid in ipairs(toSend) do
        local args = {
            [1] = {
                [uid] = 1
            }
        }
        pcall(function()
            enrollRemote:InvokeServer(unpack(args))
        end)
        wait(0.2)
    end
end

local function redeemGifts()
    if redeemEvent then
        for i = 1, 12 do
            pcall(function() redeemEvent:InvokeServer(i) end)
            wait(1)
        end
    end
end

checkDaycareAndReEnroll()
wait(5)
redeemGifts()

while true do
    wait(68)
    checkDaycareAndReEnroll()
    redeemGifts()
end
