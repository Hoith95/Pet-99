getgenv().Daycare = {
    PetName = "Rave Axolotl",
    PetType = "Rainbow", -- Golden, Rainbow, or Normal
    Shiny = false,
}

local Hrp = game.Players.LocalPlayer.Character.HumanoidRootPart
local Util = game.ReplicatedStorage.Library.Util

local GetDaycare = function()
    local MachineName
    if require(game.ReplicatedStorage.Library.Client.MachineCmds).All()["DaycareMachine"] then
        MachineName = "DaycareMachine"
    else
        MachineName = "SuperMachine"
    end
    for _, v in pairs(require(game.ReplicatedStorage.Library.Client.MachineCmds).All()[MachineName]) do
        if v and v.MachineName == MachineName then
            return v.Pad.arrow.CFrame
        end
    end
end

local tpZone = function(ZoneFolder)
    if ZoneFolder and not ZoneFolder:FindFirstChild("INTERACT") then
        repeat
            Hrp.CFrame = ZoneFolder.PERSISTENT.Teleport.CFrame * CFrame.new(0,10,0)
            task.wait(1)
        until ZoneFolder and ZoneFolder:FindFirstChild("INTERACT")
    end
end

local getRemainingTime = function()
    local remainingTime = 0
    for petId, _ in pairs(require(game.ReplicatedStorage.Library.Client.DaycareCmds).GetActive()) do
        if require(game.ReplicatedStorage.Library.Client.DaycareCmds).ComputeRemainingTime(petId) > remainingTime then
            remainingTime = require(game.ReplicatedStorage.Library.Client.DaycareCmds).ComputeRemainingTime(petId)
        end
    end
    return remainingTime
end

local TableLength = function(t)
    local count = 0
    for _ in pairs(t) do
        count = count + 1
    end
    return count
end

local petInDaycare = function()
    return TableLength(require(game.ReplicatedStorage.Library.Client.DaycareCmds).GetActive()) > 0
end

if require(Util.WorldsUtil).GetWorld().WorldNumber == 1 then tpZone(require(Util.MapUtil).GetZone("Beach")) end

local DaycareMachineCFrame, daycarePetId = GetDaycare(), nil

local function GetPetID(pt, shiny)
    for id, data in pairs(require(game.ReplicatedStorage.Library.Client.Save).Get().Inventory.Pet) do
        if data["id"] == Daycare.PetName and data["pt"] == pt and data["sh"] == shiny then
            return id
        end
    end
end

if string.lower(Daycare.PetType) == "normal" then
    if not Daycare.Shiny then
        daycarePetId = GetPetID(nil, nil)
    else
        daycarePetId = GetPetID(nil, true)
    end
else
    local pt = string.lower(Daycare.PetType) == "golden" and 1 or 2
    if not Daycare.Shiny then
        daycarePetId = GetPetID(pt, nil)
    else
        daycarePetId = GetPetID(pt, true)
    end
end

print(Daycare.PetName, Daycare.PetType, Daycare.Shiny, daycarePetId)

local OgPos
task.spawn(function()
    while true do
        OgPos = Hrp.CFrame
        if petInDaycare() then
            repeat task.wait(1)
            until getRemainingTime() <= 0
            Hrp.CFrame = DaycareMachineCFrame
            repeat task.wait()
            until require(game.ReplicatedStorage.Library.Client.DaycareCmds).Claim() and not petInDaycare()
        else
            Hrp.CFrame = DaycareMachineCFrame
            local EnrollAmount = require(game.ReplicatedStorage.Library.Client.DaycareCmds).GetMaxSlots() - require(game.ReplicatedStorage.Library.Client.DaycareCmds).GetUsedSlots()
            repeat task.wait()
            until require(game.ReplicatedStorage.Library.Client.DaycareCmds).Enroll({[daycarePetId] = EnrollAmount})
            repeat task.wait()
            until petInDaycare()
            Hrp.CFrame = OgPos
        end
    end
end)
