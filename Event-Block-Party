-- üìå Script t·ª± ƒë·ªông mua tiles quanh PlotIndex li√™n t·ª•c (v√≤ng l·∫∑p v√¥ h·∫°n)

local plotIndex = 1       -- Thay PlotIndex t√πy √Ω
local radiusMax = 6       -- B√°n k√≠nh t·ªëi ƒëa
local delayPerTile = 0.05  -- Delay gi·ªØa m·ªói l·∫ßn mua tile
local delayPerCycle = 0.05   -- Delay sau m·ªói v√≤ng mua t·∫•t c·∫£ offsets

-- L·∫•y reference t·ªõi RemoteFunction
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local PlotsInvoke = ReplicatedStorage:WaitForChild("Network"):WaitForChild("Plots_Invoke")

-- T·∫°o danh s√°ch offsets (dx, dy) trong v√πng vu√¥ng b√°n k√≠nh radiusMax
local offsets = {}
for dx = -radiusMax, radiusMax do
    for dy = -radiusMax, radiusMax do
        if not (dx == 0 and dy == 0) then  -- lo·∫°i b·ªè ch√≠nh gi·ªØa
            table.insert(offsets, {dx, dy})
        end
    end
end

-- H√†m mua 1 tile t·∫°i offset (dx, dy)
local function purchaseTile(dx, dy)
    local args = {
        [1] = plotIndex,
        [2] = "PurchaseTile",
        [3] = dx,
        [4] = dy,
    }
    local success, result = pcall(function()
        return PlotsInvoke:InvokeServer(unpack(args))
    end)
    if success then
        warn(string.format("‚úÖ [Plot %d] Mua tile t·∫°i offset (%d, %d) th√†nh c√¥ng", plotIndex, dx, dy))
    else
        warn(string.format("‚ùå [Plot %d] L·ªói mua tile (%d, %d): %s", plotIndex, dx, dy, tostring(result)))
    end
end

-- V√≤ng l·∫∑p v√¥ h·∫°n
while true do
    warn(string.format("‚ñ∂Ô∏è B·∫Øt ƒë·∫ßu v√≤ng mua tiles quanh PlotIndex = %d, b√°n k√≠nh = %d", plotIndex, radiusMax))
    for _, offset in ipairs(offsets) do
        purchaseTile(offset[1], offset[2])
        task.wait(delayPerTile)
    end
    warn(string.format("üéâ Ho√†n t·∫•t m·ªôt v√≤ng mua %d √¥. ƒê·ª£i %d gi√¢y tr∆∞·ªõc v√≤ng ti·∫øp theo", #offsets, delayPerCycle))
    task.wait(delayPerCycle)
end

------------------------
-- üìå Tham chi·∫øu t·ªõi RemoteFunction
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local TilesInvoke = ReplicatedStorage:WaitForChild("Network"):WaitForChild("Tiles_Invoke")

-- üìå Tham chi·∫øu t·ªõi folder ch·ª©a c√°c tile
local tilesFolder = workspace:WaitForChild("__THINGS"):WaitForChild("Tiles")

-- ‚öôÔ∏è C·∫•u h√¨nh th·ªùi gian ch·ªù
local delayPerTile  = 0.05   -- th·ªùi gian ch·ªù gi·ªØa m·ªói tile
local delayPerCycle = 0.05   -- th·ªùi gian ch·ªù gi·ªØa m·ªói v√≤ng l·∫∑p

-- ‚öôÔ∏è H√†m x·ª≠ l√Ω t·ª´ng tile: g·ª≠i 2 l·ªánh Claim + Open
local function claimAndOpenTiles()
    warn("‚ñ∂Ô∏è B·∫Øt ƒë·∫ßu v√≤ng Claim + Open cho t·∫•t c·∫£ Tiles")

    local tileList = tilesFolder:GetChildren()

    for _, tileInstance in ipairs(tileList) do
        local tileId = tileInstance.Name

        -- üîπ G·ª≠i l·ªánh Claim
        local success1, result1 = pcall(function()
            return TilesInvoke:InvokeServer(tileId, "Claim")
        end)

        if success1 then
            warn(("‚úÖ Claimed Tile %s"):format(tileId))
        else
            warn(("‚ùå L·ªói Claim Tile %s: %s"):format(tileId, tostring(result1)))
        end

        -- üîπ G·ª≠i l·ªánh Open
        local success2, result2 = pcall(function()
            return TilesInvoke:InvokeServer(tileId, "Open")
        end)

        if success2 then
            warn(("üîì Opened Tile %s"):format(tileId))
        else
            warn(("‚ùå L·ªói Open Tile %s: %s"):format(tileId, tostring(result2)))
        end

        task.wait(delayPerTile)
    end

    warn(("üéâ ƒê√£ x·ª≠ l√Ω %d Tiles. ƒê·ª£i %g gi√¢y tr∆∞·ªõc v√≤ng ti·∫øp theo..."):format(#tileList, delayPerCycle))
    task.wait(delayPerCycle)
end

-- üîÅ V√≤ng l·∫∑p v√¥ h·∫°n: m·ªói v√≤ng s·∫Ω Claim + Open t·∫•t c·∫£
while true do
    claimAndOpenTiles()
end


-----------------------------
-- üìå Tham chi·∫øu RemoteEvent
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local TilesFire = ReplicatedStorage:WaitForChild("Network"):WaitForChild("Tiles_Fire")

-- üìå Tham chi·∫øu folder ch·ª©a c√°c tile
local tilesFolder = workspace:WaitForChild("__THINGS"):WaitForChild("Tiles")

-- ‚öôÔ∏è C·∫•u h√¨nh
local delayPerTile = 0.05   -- th·ªùi gian ch·ªù gi·ªØa m·ªói tile
local delayPerCycle = 0.05  -- th·ªùi gian ch·ªù gi·ªØa m·ªói v√≤ng l·∫∑p

-- ‚öôÔ∏è H√†m x·ª≠ l√Ω t·ª´ng tile: g·ª≠i c·∫£ 2 l·ªánh li√™n ti·∫øp
local function claimAndUnlockTiles()
    warn("‚ñ∂Ô∏è B·∫Øt ƒë·∫ßu v√≤ng Claim + Unlock cho t·∫•t c·∫£ Tiles")

    local tileList = tilesFolder:GetChildren()

    for _, tileInstance in ipairs(tileList) do
        local tileId = tileInstance.Name

        -- G·ª≠i l·ªánh Claimed
        local args1 = {
            [1] = tileId,
            [2] = "Claimed",
        }

        local success1, err1 = pcall(function()
            TilesFire:FireServer(unpack(args1))
        end)

        if success1 then
            warn(("‚úÖ Claimed Tile %s"):format(tileId))
        else
            warn(("‚ùå L·ªói Claimed Tile %s: %s"):format(tileId, tostring(err1)))
        end

        -- G·ª≠i l·ªánh Unlock
        local args2 = {
            [1] = tileId,
            [2] = "Unlock",
        }

        local success2, err2 = pcall(function()
            TilesFire:FireServer(unpack(args2))
        end)

        if success2 then
            warn(("üîì Unlock Tile %s"):format(tileId))
        else
            warn(("‚ùå L·ªói Unlock Tile %s: %s"):format(tileId, tostring(err2)))
        end

        task.wait(delayPerTile)
    end

    warn(("üéâ ƒê√£ x·ª≠ l√Ω %d Tiles. ƒê·ª£i %g gi√¢y tr∆∞·ªõc v√≤ng ti·∫øp theo..."):format(#tileList, delayPerCycle))
    task.wait(delayPerCycle)
end

-- üîÅ V√≤ng l·∫∑p v√¥ h·∫°n
while true do
    claimAndUnlockTiles()
end

-----------
-- üìå Tham chi·∫øu RemoteFunction v√† folder Tiles
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local TilesInvoke = ReplicatedStorage:WaitForChild("Network"):WaitForChild("Tiles_Invoke")
local tilesFolder = workspace:WaitForChild("__THINGS"):WaitForChild("Tiles")

-- üîÅ V√≤ng l·∫∑p v√¥ h·∫°n, m·ªói 30s l·∫∑p l·∫°i
while true do
    print("üîÑ B·∫Øt ƒë·∫ßu v√≤ng x·ª≠ l√Ω m·ªõi...")

    for _, tile in ipairs(tilesFolder:GetChildren()) do
        if tile:IsA("Model") or tile:IsA("Folder") then
            local tileId = tile.Name
            local hasPlant1 = tile:FindFirstChild("Plant1")
            local hasDiamond = tile:FindFirstChild("Diamond")

            -- üì¶ Claim t·ª´ 1 ‚Üí 6 n·∫øu c√≥ Plant1
            if hasPlant1 then
                print("üåø Tile c√≥ Plant1:", tileId)

                for i = 0, 6 do
                    local args = {
                        [1] = tileId,
                        [2] = "Claim",
                        [3] = i
                    }

                    local success, result = pcall(function()
                        return TilesInvoke:InvokeServer(unpack(args))
                    end)

                    if success then
                        print(("‚úÖ Claim %s (i=%d) th√†nh c√¥ng"):format(tileId, i))
                    else
                        warn(("‚ùå L·ªói Claim %s (i=%d): %s"):format(tileId, i, tostring(result)))
                    end

                    task.wait(0.1)
                end
            end

            -- üíé ClaimDiamond n·∫øu c√≥ Diamond
            if hasDiamond then
                print("üíé Tile c√≥ Diamond:", tileId)

                local args = {
                    [1] = tileId,
                    [2] = "Tile_ClaimDiamonds"
                }

                local success, result = pcall(function()
                    return TilesInvoke:InvokeServer(unpack(args))
                end)

                if success then
                    print(("‚úÖ ClaimDiamond %s th√†nh c√¥ng"):format(tileId))
                else
                    warn(("‚ùå L·ªói ClaimDiamond %s: %s"):format(tileId, tostring(result)))
                end

                task.wait(0.1)
            end
        end
    end

    print("‚è≥ ƒê·ª£i 30 gi√¢y tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu v√≤ng ti·∫øp theo...\n")
    task.wait(30)
end
