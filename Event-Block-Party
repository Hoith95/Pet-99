-- üìå Script t·ª± ƒë·ªông mua tiles quanh PlotIndex li√™n t·ª•c (v√≤ng l·∫∑p v√¥ h·∫°n)

local plotIndex = 1       -- Thay PlotIndex t√πy √Ω
local radiusMax = 6       -- B√°n k√≠nh t·ªëi ƒëa
local delayPerTile = 0.05  -- Delay gi·ªØa m·ªói l·∫ßn mua tile
local delayPerCycle = 0.05   -- Delay sau m·ªói v√≤ng mua t·∫•t c·∫£ offsets

-- L·∫•y reference t·ªõi RemoteFunction
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local PlotsInvoke = ReplicatedStorage:WaitForChild("Network"):WaitForChild("Plots_Invoke")

-- T·∫°o danh s√°ch offsets (dx, dy) trong v√πng vu√¥ng b√°n k√≠nh radiusMax
local offsets = {}
for dx = -radiusMax, radiusMax do
    for dy = -radiusMax, radiusMax do
        if not (dx == 0 and dy == 0) then  -- lo·∫°i b·ªè ch√≠nh gi·ªØa
            table.insert(offsets, {dx, dy})
        end
    end
end

-- H√†m mua 1 tile t·∫°i offset (dx, dy)
local function purchaseTile(dx, dy)
    local args = {
        [1] = plotIndex,
        [2] = "PurchaseTile",
        [3] = dx,
        [4] = dy,
    }
    local success, result = pcall(function()
        return PlotsInvoke:InvokeServer(unpack(args))
    end)
    if success then
        warn(string.format("‚úÖ [Plot %d] Mua tile t·∫°i offset (%d, %d) th√†nh c√¥ng", plotIndex, dx, dy))
    else
        warn(string.format("‚ùå [Plot %d] L·ªói mua tile (%d, %d): %s", plotIndex, dx, dy, tostring(result)))
    end
end

-- V√≤ng l·∫∑p v√¥ h·∫°n
while true do
    warn(string.format("‚ñ∂Ô∏è B·∫Øt ƒë·∫ßu v√≤ng mua tiles quanh PlotIndex = %d, b√°n k√≠nh = %d", plotIndex, radiusMax))
    for _, offset in ipairs(offsets) do
        purchaseTile(offset[1], offset[2])
        task.wait(delayPerTile)
    end
    warn(string.format("üéâ Ho√†n t·∫•t m·ªôt v√≤ng mua %d √¥. ƒê·ª£i %d gi√¢y tr∆∞·ªõc v√≤ng ti·∫øp theo", #offsets, delayPerCycle))
    task.wait(delayPerCycle)
end

------------------------
-- üìå Tham chi·∫øu t·ªõi RemoteFunction
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local TilesInvoke = ReplicatedStorage:WaitForChild("Network"):WaitForChild("Tiles_Invoke")

-- üìå Tham chi·∫øu t·ªõi folder ch·ª©a c√°c tile
local tilesFolder = workspace:WaitForChild("__THINGS"):WaitForChild("Tiles")

-- ‚öôÔ∏è C·∫•u h√¨nh
local delayPerTile  = 0.05   -- th·ªùi gian ch·ªù gi·ªØa m·ªói claim
local delayPerCycle = 0.05     -- th·ªùi gian ch·ªù gi·ªØa m·ªói v√≤ng l·∫∑p

-- üîÑ V√≤ng l·∫∑p v√¥ h·∫°n
while true do
    warn("‚ñ∂Ô∏è B·∫Øt ƒë·∫ßu v√≤ng Claim cho t·∫•t c·∫£ Tiles")
    for _, tileInstance in ipairs(tilesFolder:GetChildren()) do
        local tileId = tileInstance.Name
        local args = {
            [1] = tileId,
            [2] = "Claim",
        }

        local ok, res = pcall(function()
            return TilesInvoke:InvokeServer(unpack(args))
        end)

        if ok then
            warn(("‚úÖ ƒê√£ Claim Tile %s"):format(tileId))
        else
            warn(("‚ùå L·ªói Claim Tile %s: %s"):format(tileId, tostring(res)))
        end

        task.wait(delayPerTile)
    end

    warn(("üéâ ƒê√£ claim xong %d Tiles. ƒê·ª£i %d gi√¢y tr∆∞·ªõc khi l·∫∑p l·∫°i‚Ä¶"):format(#tilesFolder:GetChildren(), delayPerCycle))
    task.wait(delayPerCycle)
end

