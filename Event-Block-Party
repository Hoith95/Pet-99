local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")

-- T√°ch ri√™ng c√°c h√†m kh√¥ng log, d√πng task.spawn ƒë·ªÉ ch·∫°y song song

---------------- üß© LU·ªíNG 1: Mua tiles quanh Plot ----------------

local function startAutoPurchase()
	local plotIndex = 1
	local radiusMax = 6
	local delayPerTile = 0.05
	local delayPerCycle = 0.05

	local PlotsInvoke = ReplicatedStorage:WaitForChild("Network"):WaitForChild("Plots_Invoke")

	local offsets = {}
	for dx = -radiusMax, radiusMax do
		for dy = -radiusMax, radiusMax do
			if not (dx == 0 and dy == 0) then
				table.insert(offsets, {dx, dy})
			end
		end
	end

	local function purchaseTile(dx, dy)
		local args = {
			[1] = plotIndex,
			[2] = "PurchaseTile",
			[3] = dx,
			[4] = dy,
		}
		pcall(function()
			PlotsInvoke:InvokeServer(unpack(args))
		end)
	end

	while true do
		for _, offset in ipairs(offsets) do
			purchaseTile(offset[1], offset[2])
			task.wait(delayPerTile)
		end
		task.wait(delayPerCycle)
	end
end

---------------- üß© LU·ªíNG 2: Claim + Open b·∫±ng Tiles_Invoke ----------------

local function startClaimAndOpen()
	local TilesInvoke = ReplicatedStorage:WaitForChild("Network"):WaitForChild("Tiles_Invoke")
	local tilesFolder = Workspace:WaitForChild("__THINGS"):WaitForChild("Tiles")
	local delayPerTile  = 0.05
	local delayPerCycle = 0.05

	local function claimAndOpenTiles()
		local tileList = tilesFolder:GetChildren()
		for _, tileInstance in ipairs(tileList) do
			local tileId = tileInstance.Name

			pcall(function()
				TilesInvoke:InvokeServer(tileId, "Claim")
			end)
			pcall(function()
				TilesInvoke:InvokeServer(tileId, "Open")
			end)
			task.wait(delayPerTile)
		end
		task.wait(delayPerCycle)
	end

	while true do
		claimAndOpenTiles()
	end
end

---------------- üß© LU·ªíNG 3: Claim + Unlock b·∫±ng Tiles_Fire ----------------

local function startClaimAndUnlock()
	local TilesFire = ReplicatedStorage:WaitForChild("Network"):WaitForChild("Tiles_Fire")
	local tilesFolder = Workspace:WaitForChild("__THINGS"):WaitForChild("Tiles")
	local delayPerTile = 0.05
	local delayPerCycle = 0.05

	local function claimAndUnlockTiles()
		local tileList = tilesFolder:GetChildren()
		for _, tileInstance in ipairs(tileList) do
			local tileId = tileInstance.Name

			local args1 = {tileId, "Claimed"}
			pcall(function()
				TilesFire:FireServer(unpack(args1))
			end)

			local args2 = {tileId, "Unlock"}
			pcall(function()
				TilesFire:FireServer(unpack(args2))
			end)

			task.wait(delayPerTile)
		end
		task.wait(delayPerCycle)
	end

	while true do
		claimAndUnlockTiles()
	end
end

---------------- üß© LU·ªíNG 4: Auto Claim Plant + Diamond ----------------

local function startAutoPlantDiamond()
	local TilesInvoke = ReplicatedStorage:WaitForChild("Network"):WaitForChild("Tiles_Invoke")
	local tilesFolder = Workspace:WaitForChild("__THINGS"):WaitForChild("Tiles")

	while true do
		for _, tile in ipairs(tilesFolder:GetChildren()) do
			if tile:IsA("Model") or tile:IsA("Folder") then
				local tileId = tile.Name
				local hasPlant1 = tile:FindFirstChild("Plant1")
				local hasDiamond = tile:FindFirstChild("Diamond")

				if hasPlant1 then
					for i = 0, 6 do
						local args = {tileId, "Claim", i}
						pcall(function()
							TilesInvoke:InvokeServer(unpack(args))
						end)
						task.wait(0.1)
					end
				end

				if hasDiamond then
					local args = {tileId, "Tile_ClaimDiamonds"}
					pcall(function()
						TilesInvoke:InvokeServer(unpack(args))
					end)
					task.wait(0.1)
				end
			end
		end
		task.wait(30)
	end
end

---------------- üîÅ K√≠ch ho·∫°t c·∫£ 4 lu·ªìng ----------------

task.spawn(startAutoPurchase)
task.spawn(startClaimAndOpen)
task.spawn(startClaimAndUnlock)
task.spawn(startAutoPlantDiamond)
