-- Ki·ªÉm tra bi·∫øn to√†n c·ª•c ƒë·ªÉ x√°c ƒë·ªãnh script ƒë√£ ch·∫°y hay ch∆∞a
if _G.TELEMAP then
    warn("Script ƒë√£ ƒë∆∞·ª£c ch·∫°y tr∆∞·ªõc ƒë√≥!")
    return -- D·ª´ng script n·∫øu ƒë√£ ch·∫°y
end

-- ƒê√°nh d·∫•u script ƒë√£ ƒë∆∞·ª£c ch·∫°y
_G.TELEMAP = true

-- ======= C·∫§U H√åNH =======
local TARGET_PLACE_ID = 140403681187145 -- ch·ªâ ch·∫°y khi ƒë√∫ng PlaceId n√†y
local TARGET_POS = Vector3.new(-14251, 16.24, 2159)
local TELEPORT_THRESHOLD = 2      -- sai s·ªë cho ph√©p tr∆∞·ªõc khi teleport l·∫°i (units)
local TELEPORT_INTERVAL = 365     -- (gi√¢y) kho·∫£ng th·ªùi gian gi·ªØa c√°c l·∫ßn ki·ªÉm tra v·ªã tr√≠ khi ƒë√£ v√†o loop
local CHECK_INTERVAL_WHILE_WAIT = 300 -- (gi√¢y) th·ªùi gian ch·ªù khi v·∫´n ch∆∞a ƒë·∫°t 10 l∆∞·ª£t
local MAX_DAILY_RUNS = 10
-- ========================

-- Ki·ªÉm tra PlaceId ngay l·∫≠p t·ª©c
if game.PlaceId ~= TARGET_PLACE_ID then
    warn("‚õî PlaceId kh√¥ng kh·ªõp. Script ch·ªâ ch·∫°y ·ªü PlaceId: " .. tostring(TARGET_PLACE_ID) .. " (hi·ªán t·∫°i: " .. tostring(game.PlaceId) .. ").")
    return
end

local Players = game:GetService("Players")
local player = Players.LocalPlayer
if not player then
    -- ch·ªù LocalPlayer n·∫øu ch∆∞a c√≥
    repeat task.wait() player = Players.LocalPlayer until player
end

-- Safe require Save (tr√°nh l·ªói n·∫øu module kh√¥ng t·ªìn t·∫°i)
local Save
do
    local ok, res = pcall(function()
        return require(game:GetService("ReplicatedStorage").Library.Client.Save)
    end)
    if ok then
        Save = res
    else
        warn("‚ö†Ô∏è Kh√¥ng th·ªÉ require Save module: " .. tostring(res))
        Save = nil
    end
end

-- L·∫•y s·ªë l∆∞·ª£t ƒë√£ d√πng m·ªôt c√°ch an to√†n
local function getRunsUsed()
    if not Save then return 0 end
    local ok, data = pcall(function() return Save.Get() end)
    if not ok then
        warn("‚ö†Ô∏è L·ªói khi g·ªçi Save.Get(): " .. tostring(data))
        return 0
    end
    if data and data.TimeTrialStats then
        return data.TimeTrialStats.DailyRuns or 0
    end
    return 0
end

-- Tr√°nh start loop nhi·ªÅu l·∫ßn
local loopStarted = false

local function startSmartTeleportLoop()
    if loopStarted then
        warn("üîÅ Smart teleport loop ƒë√£ ch·∫°y, b·ªè qua l·∫ßn start ti·∫øp theo.")
        return
    end
    loopStarted = true

    warn("‚úÖ ƒê√£ ho√†n t·∫•t Time Trial (" .. tostring(MAX_DAILY_RUNS) .. "/" .. tostring(MAX_DAILY_RUNS) .. ") ‚Üí B·∫Øt ƒë·∫ßu gi√°m s√°t v·ªã tr√≠ v√† teleport khi l·ªách.")

    task.spawn(function()
        while true do
            local character = player.Character or player.CharacterAdded:Wait()
            local hrp = character:FindFirstChild("HumanoidRootPart") or character:WaitForChild("HumanoidRootPart", 5)
            if hrp then
                local currentPos = hrp.Position
                if (currentPos - TARGET_POS).Magnitude > TELEPORT_THRESHOLD then
                    warn("‚Ü©Ô∏è V·ªã tr√≠ l·ªách (" .. math.floor((currentPos - TARGET_POS).Magnitude * 100)/100 .. " units) ‚Äî teleport v·ªÅ v·ªã tr√≠ c·ªë ƒë·ªãnh.")
                    local ok, err = pcall(function()
                        hrp.CFrame = CFrame.new(TARGET_POS)
                    end)
                    if not ok then
                        warn("‚ö†Ô∏è ƒê√£ x·∫£y ra l·ªói khi teleport: " .. tostring(err))
                    end
                end
            else
                warn("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y HumanoidRootPart, s·∫Ω th·ª≠ l·∫°i sau.")
            end
            task.wait(TELEPORT_INTERVAL)
        end
    end)
end

local function monitorUntilMaxRuns()
    while true do
        local runsUsed = getRunsUsed()
        local runsLeft = math.max(0, MAX_DAILY_RUNS - runsUsed)

        if runsUsed >= MAX_DAILY_RUNS then
            startSmartTeleportLoop()
            break
        else
            warn("‚è≥ C√≤n l·∫°i " .. tostring(runsLeft) .. " l∆∞·ª£t Time Trial ‚Üí ki·ªÉm tra l·∫°i sau " .. tostring(CHECK_INTERVAL_WHILE_WAIT/60) .. " ph√∫t.")
            task.wait(CHECK_INTERVAL_WHILE_WAIT)
        end
    end
end

-- B·∫Øt ƒë·∫ßu
monitorUntilMaxRuns()
