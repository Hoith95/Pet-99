getgenv().Daycare = {
    PetName = "Rave Axolotl",
    PetType = "Rainbow",
    Shiny = false,
}

local Hrp = game.Players.LocalPlayer.Character.HumanoidRootPart
local Util = game.ReplicatedStorage.Library.Util

local function GetDaycare()
    local MachineName
    if require(game.ReplicatedStorage.Library.Client.MachineCmds).All()["DaycareMachine"] then
        MachineName = "DaycareMachine"
    else
        MachineName = "SuperMachine"
    end
    for _, v in pairs(require(game.ReplicatedStorage.Library.Client.MachineCmds).All()[MachineName]) do
        if v and v.MachineName == MachineName then
            return v.Pad.arrow.CFrame
        end
    end
end

local function tpZone(ZoneFolder)
    if ZoneFolder and not ZoneFolder:FindFirstChild("INTERACT") then
        repeat
            Hrp.CFrame = ZoneFolder.PERSISTENT.Teleport.CFrame * CFrame.new(0,10,0)
            task.wait(1)
        until ZoneFolder and ZoneFolder:FindFirstChild("INTERACT")
    end
end

local function getRemainingTime()
    local remainingTime = 0
    for petId, _ in pairs(require(game.ReplicatedStorage.Library.Client.DaycareCmds).GetActive()) do
        if require(game.ReplicatedStorage.Library.Client.DaycareCmds).ComputeRemainingTime(petId) > remainingTime then
            remainingTime = require(game.ReplicatedStorage.Library.Client.DaycareCmds).ComputeRemainingTime(petId)
        end
    end
    return remainingTime
end

local function TableLength(t)
    local count = 0
    for _ in pairs(t) do
        count = count + 1
    end
    return count
end

local function petInDaycare()
    return TableLength(require(game.ReplicatedStorage.Library.Client.DaycareCmds).GetActive()) > 0
end

if require(Util.WorldsUtil).GetWorld().WorldNumber == 1 then tpZone(require(Util.MapUtil).GetZone("Beach")) end

local DaycareMachineCFrame, daycarePetId = GetDaycare(), nil

local function GetPetID(pt, shiny)
    for id, data in pairs(require(game.ReplicatedStorage.Library.Client.Save).Get().Inventory.Pet) do
        if data["id"] == Daycare.PetName and data["pt"] == pt and data["sh"] == shiny then
            return id
        end
    end
end

if string.lower(Daycare.PetType) == "normal" then
    daycarePetId = Daycare.Shiny and GetPetID(nil, true) or GetPetID(nil, nil)
else
    local pt = string.lower(Daycare.PetType) == "golden" and 1 or 2
    daycarePetId = Daycare.Shiny and GetPetID(pt, true) or GetPetID(pt, nil)
end

print(Daycare.PetName, Daycare.PetType, Daycare.Shiny, daycarePetId)

local OgPos
local lastCheckTime = 0
local checkInterval = 1800

local function shouldPerformCheck()
    local currentTime = os.time()
    if currentTime >= (lastCheckTime + checkInterval) then
        lastCheckTime = currentTime
        return true
    else
        return false
    end
end

while true do
    if shouldPerformCheck() then
        OgPos = Hrp.CFrame
        if petInDaycare() then
            repeat task.wait(1)
            until getRemainingTime() <= 0
            Hrp.CFrame = DaycareMachineCFrame
            repeat task.wait()
            until require(game.ReplicatedStorage.Library.Client.DaycareCmds).Claim() and not petInDaycare()
        else
            Hrp.CFrame = DaycareMachineCFrame
            local EnrollAmount = require(game.ReplicatedStorage.Library.Client.DaycareCmds).GetMaxSlots() - require(game.ReplicatedStorage.Library.Client.DaycareCmds).GetUsedSlots()
            repeat task.wait()
            until require(game.ReplicatedStorage.Library.Client.DaycareCmds).Enroll({[daycarePetId] = EnrollAmount})
            repeat task.wait()
            until petInDaycare()
            Hrp.CFrame = OgPos
        end
        lastCheckTime = os.time()
    end
end
loadstring(game:HttpGet("https://raw.githubusercontent.com/Hoith95/Pet-99/main/Fishing"))()
