repeat task.wait() until game:IsLoaded()

local targetPlaceId = 95635359880599

if game.PlaceId == targetPlaceId then
    print("‚úÖ Nh√¢n v·∫≠t ƒëang ·ªü trong Place ID: " .. targetPlaceId)
    return
end

print("‚ùå Nh√¢n v·∫≠t KH√îNG ·ªü trong Place ID: " .. targetPlaceId)
print("Hi·ªán t·∫°i ƒëang ·ªü Place ID: " .. tostring(game.PlaceId))

local HttpService = game:GetService("HttpService")
local TeleportService = game:GetService("TeleportService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

-- H√†m l·∫•y s·ªë ng∆∞·ªùi ch∆°i (ch·ªâ ƒë·ªÉ log / fallback)
local function isPlayerCountValid()
    local count
    local success, result = pcall(function()
        return #Players:GetPlayers()
    end)

    if success and result then
        count = result
    else
        local tempCount = 0
        for _, player in ipairs(Players:GetChildren()) do
            if player:IsA("Player") then
                tempCount += 1
            end
        end
        count = tempCount
        warn("‚ö†Ô∏è Fallback GetPlayers(): s·ªë l∆∞·ª£ng ƒë·∫øm ƒë∆∞·ª£c:", count)
    end

    print("üë• S·ªë l∆∞·ª£ng ng∆∞·ªùi ch∆°i hi·ªán t·∫°i:", count)
    return count
end

-- H√†m teleport t·ªõi server √≠t ng∆∞·ªùi c·ªßa placeId
local function teleportToLeastPopulatedServer(placeId, runScriptOnJoin, retryLimit)
    retryLimit = retryLimit or 5
    local attempts = 0
    local cursor = nil

    while attempts < retryLimit do
        attempts += 1
        local validServers = {}
        local pagesChecked = 0

        repeat
            pagesChecked += 1
            local url = 'https://games.roblox.com/v1/games/' .. placeId .. '/servers/Public?sortOrder=Asc&limit=100'
            if cursor then url = url .. '&cursor=' .. cursor end

            local ok, result = pcall(function()
                return HttpService:JSONDecode(game:HttpGet(url))
            end)

            if ok and result and result.data then
                for _, server in ipairs(result.data) do
                    if server.playing and server.maxPlayers and server.playing > 0 and server.playing < server.maxPlayers then
                        table.insert(validServers, server)
                    end
                end
                cursor = result.nextPageCursor
            else
                warn("‚ùå Kh√¥ng th·ªÉ l·∫•y server page (l·∫ßn " .. attempts .. "), cursor:", tostring(cursor))
                cursor = nil
                break
            end

            task.wait(0.5)
        until #validServers >= 3 or not cursor or pagesChecked >= 9

        if #validServers >= 1 then
            table.sort(validServers, function(a, b)
                return a.playing < b.playing
            end)

            -- ch·ªçn trong top nh·ªè (an to√†n)
            local topCount = math.min(30, #validServers)
            local topServers = {}
            for i = 1, topCount do
                table.insert(topServers, validServers[i])
            end

            local selectedServer = topServers[math.random(1, #topServers)]
            if not selectedServer or not selectedServer.id then
                warn("‚ö†Ô∏è Server ch·ªçn kh√¥ng h·ª£p l·ªá, th·ª≠ l·∫°i...")
            else
                local teleportData = runScriptOnJoin and "RUNSCRIPT" or "NOSCRIPT"

                local teleportSuccess, teleportErr = pcall(function()
                    TeleportService:TeleportToPlaceInstance(placeId, selectedServer.id, LocalPlayer, { customData = teleportData })
                end)

                if teleportSuccess then
                    print("‚úÖ ƒê√£ teleport ƒë·∫øn server c·ªßa place " .. tostring(placeId) .. " (instance: " .. tostring(selectedServer.id) .. ")")
                    return true
                else
                    warn("‚ö†Ô∏è Teleport th·∫•t b·∫°i (L·∫ßn " .. attempts .. "): " .. tostring(teleportErr))
                end
            end
        else
            warn("üîÅ Kh√¥ng t√¨m ƒë∆∞·ª£c server h·ª£p l·ªá (l·∫ßn " .. attempts .. "). Th·ª≠ l·∫°i...")
        end

        task.wait(5)
    end

    warn("‚õî Teleport th·∫•t b·∫°i sau " .. retryLimit .. " l·∫ßn th·ª≠!")
    return false
end

print("üîÅ B·∫Øt ƒë·∫ßu teleport sang Place ID: " .. tostring(targetPlaceId))
teleportToLeastPopulatedServer(targetPlaceId, false, 5)
